apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

def config = rootProject.ext.configuration
def libs = rootProject.ext.libraries;
def test = rootProject.ext.testingLibraries;

android {
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion

    defaultConfig {
        applicationId config.applicationId
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        vectorDrawables.useSupportLibrary=true
        versionCode config.versionCode
        versionName config.versionName
        multiDexEnabled true
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    compile project(":multiplechoice")

    compile "com.android.support:cardview-v7:${libs.supportVersion}"
    compile "com.android.support:recyclerview-v7:${libs.supportVersion}"
    compile "com.android.support:appcompat-v7:${libs.supportVersion}"
    compile "com.android.support:design:${libs.supportVersion}"
    compile "com.android.support:palette-v7:${libs.supportVersion}"
    compile "com.squareup:otto:${libs.ottoEventBus}"
    compile "com.github.bumptech.glide:glide:${libs.glide}"
    compile "com.jakewharton:butterknife:${libs.butterKnife}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${libs.butterKnife}"

    compile "frankiesardo:icepick:${libs.icePickVersion}"
    provided "frankiesardo:icepick-processor:${libs.icePickVersion}"

    /* Test */
    testCompile "junit:junit:${test.jUnit}"
}
